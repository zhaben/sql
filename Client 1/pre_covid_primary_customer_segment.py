# -*- coding: utf-8 -*-
"""Pre-COVID Primary Customer Segment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ygu1Ndn4iW28BjV4_g-QaTiIFe8iI99P

Pre-COVID Primary Customer Segment

Integration:Amazon Redshift  Purpose:Contact
"""

/*
The purpose of this dataset is to add a drilldown focused on a memberâ€™s Pre-COVID Primary Customer Segment.
The categories should be: GF, PT, PL, Lone Wolf Engaged, Lone Wolf Disengaged (0 checkins)
Identify which precovid category is dominant for each member
*/


/* filter GF class detail to only include classes taken. a filter was also applied to a specific date range for COVID analysis purposes */
with date_filter as                                                                                                                   
(select class_name, class_instance_id, s.member_id, s.class_start_date_local_ts, s.booking_cancelled_date_local_ts, s.taken_count, 1 as is_date_range   
from simon.event_group_fitness s
where booking_cancelled_date_local_ts is null 
  and taken_count=1 
  and cast(s.class_start_date_local_ts as date) >= '2019-02-01' and cast(s.class_start_date_local_ts as date) <= '2020-02-29'
),

/*First, find the count for each category for each member*/
/*count GF classes based on filter above*/
gf_count as (
select member_id, count(s.class_instance_id) as gf_count 
from date_filter s
group by member_id
)

/*count PT events based on service date, filter for precovid date range*/
,pt_count as (
select member_id, count(service_date) as pt_count from event_service
where category_desc = 'Personal Training'
and cast(service_date as date) >= '2019-02-01' and cast(service_date as date) <= '2020-02-29'
group by member_id
)

/*count PL events based on service date, filter for precovid date range*/
,pl_count as (
select member_id, count(service_date) as pl_count from event_service
where category_desc = 'Pilates'
and cast(service_date as date) >= '2019-02-01' and cast(service_date as date) <= '2020-02-29'
group by member_id
)

/*count checkin events based on checkin date, filter for precovid date range*/
,checkin_count as (
select c.member_id, count(checkin_ts_time) as checkin_count
from simon.event_checkin c
where cast(checkin_ts_time as date) >= '2019-02-01' and cast(checkin_ts_time as date) <= '2020-02-29'
group by c.member_id
)

/*join counts and handle null cases with 0 for each count*/
,all_counts as (
select m.member_id, 
  case when gf_count is null then 0 else gf_count end as gf_count, 
  case when pt_count is null then 0 else pt_count end as pt_count, 
  case when pl_count is null then 0 else pl_count end as pl_count, 
  case when checkin_count is null then 0 else checkin_count end as checkin_count
from member_contact_info m
left join checkin_count c on m.member_id = c.member_id
left join gf_count g on c.member_id = g.member_id
left join pt_count pt on g.member_id = pt.member_id
left join pl_count pl on pt.member_id = pl.member_id
)

/*Next, determine the member's primary precov_category based on tbe largest count and order of priority (GF, PT, PL LW Engaged, LW Disengaged)*/
,precov_category as (
select member_id, gf_count, pt_count, pl_count, checkin_count, 
  case when gf_count >= pt_count AND gf_count >= pl_count AND gf_count != 0 THEN 'Group Fitness'
       when pt_count >= gf_count AND pt_count >= pl_count AND pt_count != 0 THEN 'Personal Training'
       when pl_count >= gf_count AND pl_count >= pt_count AND pl_count != 0 THEN 'Pilates'
       when gf_count = 0 AND pt_count = 0 AND pl_count = 0 AND checkin_count >= 1 THEN 'Lonewolf Engaged'
       when gf_count = 0 AND pt_count = 0 AND pl_count = 0 AND checkin_count < 1 THEN 'Lonewolf Disengaged'
       ELSE null 
       END AS primary_precovid_category
  from all_counts
)

/*Lastly, display the member_id and the primary precovid category */
select member_id, primary_precovid_category from precov_category